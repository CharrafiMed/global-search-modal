// resources/js/search.js
var search_default = ({
  recentSearchesKey,
  favoriteSearchesKey,
  maxItemsAllowed,
  retainRecentIfFavorite
}) => ({
  search_history: [],
  favorite_items: [],
  init() {
    this.search_history = this.getLocalStorage(recentSearchesKey);
    this.favorite_items = this.getLocalStorage(favoriteSearchesKey);
    this.$watch(
      "search_history",
      (val) => this.setLocalStorage(recentSearchesKey, val)
    );
    this.$watch(
      "favorite_items",
      (val) => this.setLocalStorage(favoriteSearchesKey, val)
    );
  },
  getLocalStorage(key) {
    return JSON.parse(localStorage.getItem(key)) || [];
  },
  setLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
  },
  updateList(list, newItem) {
    return [
      newItem,
      ...list.filter((el) => !(el.title === newItem.title && el.group === newItem.group))
    ].slice(0, maxItemsAllowed);
  },
  addToSearchHistory(searchItem, group, url) {
    const searchItemObject = { title: searchItem, group, url };
    this.search_history = this.updateList(
      this.search_history,
      searchItemObject
    );
  },
  deleteFromHistory(searchItem, group) {
    this.search_history = this.search_history.filter(
      (el) => !(el.title === searchItem && el.group === group)
    );
  },
  deleteAllHistory() {
    this.search_history = [];
  },
  addToFavorites(favItem, group, url) {
    if (!retainRecentIfFavorite) {
      this.deleteFromHistory(favItem, group);
    }
    const favItemObject = { title: favItem, group, url };
    this.favorite_items = this.updateList(
      this.favorite_items,
      favItemObject
    );
  },
  deleteFromFavorites(favItem, group) {
    this.favorite_items = this.favorite_items.filter(
      (el) => !(el.title === favItem && el.group === group)
    );
  },
  deleteAllFavorites() {
    this.favorite_items = [];
  }
});
export {
  search_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vcmVzb3VyY2VzL2pzL3NlYXJjaC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgKHtcclxuICAgIHJlY2VudFNlYXJjaGVzS2V5LFxyXG4gICAgZmF2b3JpdGVTZWFyY2hlc0tleSxcclxuICAgIG1heEl0ZW1zQWxsb3dlZCxcclxuICAgIHJldGFpblJlY2VudElmRmF2b3JpdGVcclxufSkgPT4gKHtcclxuICAgIHNlYXJjaF9oaXN0b3J5OiBbXSxcclxuICAgIGZhdm9yaXRlX2l0ZW1zOiBbXSxcclxuXHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMuc2VhcmNoX2hpc3RvcnkgPSB0aGlzLmdldExvY2FsU3RvcmFnZShyZWNlbnRTZWFyY2hlc0tleSk7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZV9pdGVtcyA9IHRoaXMuZ2V0TG9jYWxTdG9yYWdlKGZhdm9yaXRlU2VhcmNoZXNLZXkpO1xyXG5cclxuICAgICAgICB0aGlzLiR3YXRjaChcInNlYXJjaF9oaXN0b3J5XCIsICh2YWwpID0+XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TG9jYWxTdG9yYWdlKHJlY2VudFNlYXJjaGVzS2V5LCB2YWwpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLiR3YXRjaChcImZhdm9yaXRlX2l0ZW1zXCIsICh2YWwpID0+XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TG9jYWxTdG9yYWdlKGZhdm9yaXRlU2VhcmNoZXNLZXksIHZhbClcclxuICAgICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRMb2NhbFN0b3JhZ2Uoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSkgfHwgW107XHJcbiAgICB9LFxyXG5cclxuICAgIHNldExvY2FsU3RvcmFnZShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVMaXN0KGxpc3QsIG5ld0l0ZW0pIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXdJdGVtLFxyXG4gICAgICAgICAgICAuLi5saXN0LmZpbHRlcigoZWwpID0+ICEoZWwudGl0bGUgPT09IG5ld0l0ZW0udGl0bGUgJiYgZWwuZ3JvdXAgPT09IG5ld0l0ZW0uZ3JvdXApKSxcclxuICAgICAgICBdLnNsaWNlKDAsIG1heEl0ZW1zQWxsb3dlZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZFRvU2VhcmNoSGlzdG9yeShzZWFyY2hJdGVtLCBncm91cCwgdXJsKSB7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoSXRlbU9iamVjdCA9IHsgdGl0bGU6IHNlYXJjaEl0ZW0sIGdyb3VwLCB1cmwgfTtcclxuICAgICAgICB0aGlzLnNlYXJjaF9oaXN0b3J5ID0gdGhpcy51cGRhdGVMaXN0KFxyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaF9oaXN0b3J5LFxyXG4gICAgICAgICAgICBzZWFyY2hJdGVtT2JqZWN0XHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlRnJvbUhpc3Rvcnkoc2VhcmNoSXRlbSwgZ3JvdXApIHtcclxuICAgICAgICB0aGlzLnNlYXJjaF9oaXN0b3J5ID0gdGhpcy5zZWFyY2hfaGlzdG9yeS5maWx0ZXIoXHJcbiAgICAgICAgICAgIChlbCkgPT4gIShlbC50aXRsZSA9PT0gc2VhcmNoSXRlbSAmJiBlbC5ncm91cCA9PT0gZ3JvdXApXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlQWxsSGlzdG9yeSgpIHtcclxuICAgICAgICB0aGlzLnNlYXJjaF9oaXN0b3J5ID0gW107XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZFRvRmF2b3JpdGVzKGZhdkl0ZW0sIGdyb3VwLCB1cmwpIHtcclxuICAgICAgICBpZiAoIXJldGFpblJlY2VudElmRmF2b3JpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWxldGVGcm9tSGlzdG9yeShmYXZJdGVtLCBncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZhdkl0ZW1PYmplY3QgPSB7IHRpdGxlOiBmYXZJdGVtLCBncm91cCwgdXJsIH07XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZV9pdGVtcyA9IHRoaXMudXBkYXRlTGlzdChcclxuICAgICAgICAgICAgdGhpcy5mYXZvcml0ZV9pdGVtcyxcclxuICAgICAgICAgICAgZmF2SXRlbU9iamVjdFxyXG4gICAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIGRlbGV0ZUZyb21GYXZvcml0ZXMoZmF2SXRlbSwgZ3JvdXApIHtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlX2l0ZW1zID0gdGhpcy5mYXZvcml0ZV9pdGVtcy5maWx0ZXIoXHJcbiAgICAgICAgICAgIChlbCkgPT4gIShlbC50aXRsZSA9PT0gZmF2SXRlbSAmJiBlbC5ncm91cCA9PT0gZ3JvdXApXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlQWxsRmF2b3JpdGVzKCkge1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVfaXRlbXMgPSBbXTtcclxuICAgIH0sXHJcbn0pOyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxJQUFPLGlCQUFRLENBQUM7QUFBQSxFQUNaO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0osT0FBTztBQUFBLEVBQ0gsZ0JBQWdCLENBQUM7QUFBQSxFQUNqQixnQkFBZ0IsQ0FBQztBQUFBLEVBRWpCLE9BQU87QUFDSCxTQUFLLGlCQUFpQixLQUFLLGdCQUFnQixpQkFBaUI7QUFDNUQsU0FBSyxpQkFBaUIsS0FBSyxnQkFBZ0IsbUJBQW1CO0FBRTlELFNBQUs7QUFBQSxNQUFPO0FBQUEsTUFBa0IsQ0FBQyxRQUMzQixLQUFLLGdCQUFnQixtQkFBbUIsR0FBRztBQUFBLElBQy9DO0FBQ0EsU0FBSztBQUFBLE1BQU87QUFBQSxNQUFrQixDQUFDLFFBQzNCLEtBQUssZ0JBQWdCLHFCQUFxQixHQUFHO0FBQUEsSUFDakQ7QUFBQSxFQUNKO0FBQUEsRUFFQSxnQkFBZ0IsS0FBSztBQUNqQixXQUFPLEtBQUssTUFBTSxhQUFhLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUFBLEVBQ3JEO0FBQUEsRUFFQSxnQkFBZ0IsS0FBSyxPQUFPO0FBQ3hCLGlCQUFhLFFBQVEsS0FBSyxLQUFLLFVBQVUsS0FBSyxDQUFDO0FBQUEsRUFDbkQ7QUFBQSxFQUVBLFdBQVcsTUFBTSxTQUFTO0FBQ3RCLFdBQU87QUFBQSxNQUNIO0FBQUEsTUFDQSxHQUFHLEtBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLFVBQVUsUUFBUSxTQUFTLEdBQUcsVUFBVSxRQUFRLE1BQU07QUFBQSxJQUN0RixFQUFFLE1BQU0sR0FBRyxlQUFlO0FBQUEsRUFDOUI7QUFBQSxFQUVBLG1CQUFtQixZQUFZLE9BQU8sS0FBSztBQUN2QyxVQUFNLG1CQUFtQixFQUFFLE9BQU8sWUFBWSxPQUFPLElBQUk7QUFDekQsU0FBSyxpQkFBaUIsS0FBSztBQUFBLE1BQ3ZCLEtBQUs7QUFBQSxNQUNMO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUVBLGtCQUFrQixZQUFZLE9BQU87QUFDakMsU0FBSyxpQkFBaUIsS0FBSyxlQUFlO0FBQUEsTUFDdEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLGNBQWMsR0FBRyxVQUFVO0FBQUEsSUFDdEQ7QUFBQSxFQUNKO0FBQUEsRUFFQSxtQkFBbUI7QUFDZixTQUFLLGlCQUFpQixDQUFDO0FBQUEsRUFDM0I7QUFBQSxFQUVBLGVBQWUsU0FBUyxPQUFPLEtBQUs7QUFDaEMsUUFBSSxDQUFDLHdCQUF3QjtBQUN6QixXQUFLLGtCQUFrQixTQUFTLEtBQUs7QUFBQSxJQUN6QztBQUNBLFVBQU0sZ0JBQWdCLEVBQUUsT0FBTyxTQUFTLE9BQU8sSUFBSTtBQUNuRCxTQUFLLGlCQUFpQixLQUFLO0FBQUEsTUFDdkIsS0FBSztBQUFBLE1BQ0w7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBRUEsb0JBQW9CLFNBQVMsT0FBTztBQUNoQyxTQUFLLGlCQUFpQixLQUFLLGVBQWU7QUFBQSxNQUN0QyxDQUFDLE9BQU8sRUFBRSxHQUFHLFVBQVUsV0FBVyxHQUFHLFVBQVU7QUFBQSxJQUNuRDtBQUFBLEVBQ0o7QUFBQSxFQUVBLHFCQUFxQjtBQUNqQixTQUFLLGlCQUFpQixDQUFDO0FBQUEsRUFDM0I7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
